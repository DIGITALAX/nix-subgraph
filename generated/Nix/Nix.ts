// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class OrderAdded extends EthereumEvent {
  get params(): OrderAdded__Params {
    return new OrderAdded__Params(this);
  }
}

export class OrderAdded__Params {
  _event: OrderAdded;

  constructor(event: OrderAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OrderDisabled extends EthereumEvent {
  get params(): OrderDisabled__Params {
    return new OrderDisabled__Params(this);
  }
}

export class OrderDisabled__Params {
  _event: OrderDisabled;

  constructor(event: OrderDisabled) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OrderExecuted extends EthereumEvent {
  get params(): OrderExecuted__Params {
    return new OrderExecuted__Params(this);
  }
}

export class OrderExecuted__Params {
  _event: OrderExecuted;

  constructor(event: OrderExecuted) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OrderUpdated extends EthereumEvent {
  get params(): OrderUpdated__Params {
    return new OrderUpdated__Params(this);
  }
}

export class OrderUpdated__Params {
  _event: OrderUpdated;

  constructor(event: OrderUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ThankYou extends EthereumEvent {
  get params(): ThankYou__Params {
    return new ThankYou__Params(this);
  }
}

export class ThankYou__Params {
  _event: ThankYou;

  constructor(event: ThankYou) {
    this._event = event;
  }

  get tip(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenAdded extends EthereumEvent {
  get params(): TokenAdded__Params {
    return new TokenAdded__Params(this);
  }
}

export class TokenAdded__Params {
  _event: TokenAdded;

  constructor(event: TokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdrawn extends EthereumEvent {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Nix__getOrderResultOrderStruct extends EthereumTuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get taker(): Address {
    return this[1].toAddress();
  }

  get buyOrSell(): i32 {
    return this[2].toI32();
  }

  get anyOrAll(): i32 {
    return this[3].toI32();
  }

  get tokenIds(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get expiry(): BigInt {
    return this[6].toBigInt();
  }

  get tradeCount(): BigInt {
    return this[7].toBigInt();
  }

  get tradeMax(): BigInt {
    return this[8].toBigInt();
  }

  get royaltyFactor(): BigInt {
    return this[9].toBigInt();
  }
}

export class Nix__getTokenResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Nix__getTradeResultExecutedOrdersStruct extends EthereumTuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get orderIndex(): BigInt {
    return this[1].toBigInt();
  }
}

export class Nix__getTradeResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: Array<EthereumTuple>;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: Array<Nix__getTradeResultExecutedOrdersStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromTupleArray(this.value3));
    return map;
  }
}

export class Nix__tokensResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Nix extends SmartContract {
  static bind(address: Address): Nix {
    return new Nix("Nix", address);
  }

  getOrder(token: Address, orderIndex: BigInt): Nix__getOrderResultOrderStruct {
    let result = super.call("getOrder", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromUnsignedBigInt(orderIndex)
    ]);

    return result[0].toTuple() as Nix__getOrderResultOrderStruct;
  }

  try_getOrder(
    token: Address,
    orderIndex: BigInt
  ): CallResult<Nix__getOrderResultOrderStruct> {
    let result = super.tryCall("getOrder", [
      EthereumValue.fromAddress(token),
      EthereumValue.fromUnsignedBigInt(orderIndex)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      value[0].toTuple() as Nix__getOrderResultOrderStruct
    );
  }

  getToken(tokenIndex: BigInt): Nix__getTokenResult {
    let result = super.call("getToken", [
      EthereumValue.fromUnsignedBigInt(tokenIndex)
    ]);

    return new Nix__getTokenResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getToken(tokenIndex: BigInt): CallResult<Nix__getTokenResult> {
    let result = super.tryCall("getToken", [
      EthereumValue.fromUnsignedBigInt(tokenIndex)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Nix__getTokenResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getTrade(tradeIndex: BigInt): Nix__getTradeResult {
    let result = super.call("getTrade", [
      EthereumValue.fromUnsignedBigInt(tradeIndex)
    ]);

    return new Nix__getTradeResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toTupleArray<undefined>()
    );
  }

  try_getTrade(tradeIndex: BigInt): CallResult<Nix__getTradeResult> {
    let result = super.tryCall("getTrade", [
      EthereumValue.fromUnsignedBigInt(tradeIndex)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Nix__getTradeResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toTupleArray<undefined>()
      )
    );
  }

  newOwner(): Address {
    let result = super.call("newOwner", []);

    return result[0].toAddress();
  }

  try_newOwner(): CallResult<Address> {
    let result = super.tryCall("newOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    _tokenId: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call("onERC721Received", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1),
      EthereumValue.fromUnsignedBigInt(_tokenId),
      EthereumValue.fromBytes(param3)
    ]);

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    _tokenId: BigInt,
    param3: Bytes
  ): CallResult<Bytes> {
    let result = super.tryCall("onERC721Received", [
      EthereumValue.fromAddress(param0),
      EthereumValue.fromAddress(param1),
      EthereumValue.fromUnsignedBigInt(_tokenId),
      EthereumValue.fromBytes(param3)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  ordersLength(token: Address): BigInt {
    let result = super.call("ordersLength", [EthereumValue.fromAddress(token)]);

    return result[0].toBigInt();
  }

  try_ordersLength(token: Address): CallResult<BigInt> {
    let result = super.tryCall("ordersLength", [
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  royaltyEngine(): Address {
    let result = super.call("royaltyEngine", []);

    return result[0].toAddress();
  }

  try_royaltyEngine(): CallResult<Address> {
    let result = super.tryCall("royaltyEngine", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  tokens(param0: Address): Nix__tokensResult {
    let result = super.call("tokens", [EthereumValue.fromAddress(param0)]);

    return new Nix__tokensResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_tokens(param0: Address): CallResult<Nix__tokensResult> {
    let result = super.tryCall("tokens", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Nix__tokensResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  tokensLength(): BigInt {
    let result = super.call("tokensLength", []);

    return result[0].toBigInt();
  }

  try_tokensLength(): CallResult<BigInt> {
    let result = super.tryCall("tokensLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  tradesLength(): BigInt {
    let result = super.call("tradesLength", []);

    return result[0].toBigInt();
  }

  try_tradesLength(): CallResult<BigInt> {
    let result = super.tryCall("tradesLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  weth(): Address {
    let result = super.call("weth", []);

    return result[0].toAddress();
  }

  try_weth(): CallResult<Address> {
    let result = super.tryCall("weth", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class AcceptOwnershipCall extends EthereumCall {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AddOrderCall extends EthereumCall {
  get inputs(): AddOrderCall__Inputs {
    return new AddOrderCall__Inputs(this);
  }

  get outputs(): AddOrderCall__Outputs {
    return new AddOrderCall__Outputs(this);
  }
}

export class AddOrderCall__Inputs {
  _call: AddOrderCall;

  constructor(call: AddOrderCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get taker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get buyOrSell(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get anyOrAll(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get price(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get tradeMax(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get royaltyFactor(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get integrator(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class AddOrderCall__Outputs {
  _call: AddOrderCall;

  constructor(call: AddOrderCall) {
    this._call = call;
  }

  get orderIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DisableOrderCall extends EthereumCall {
  get inputs(): DisableOrderCall__Inputs {
    return new DisableOrderCall__Inputs(this);
  }

  get outputs(): DisableOrderCall__Outputs {
    return new DisableOrderCall__Outputs(this);
  }
}

export class DisableOrderCall__Inputs {
  _call: DisableOrderCall;

  constructor(call: DisableOrderCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get orderIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get integrator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DisableOrderCall__Outputs {
  _call: DisableOrderCall;

  constructor(call: DisableOrderCall) {
    this._call = call;
  }
}

export class InitCall extends EthereumCall {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _weth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _royaltyEngine(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends EthereumCall {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateOrderCall extends EthereumCall {
  get inputs(): UpdateOrderCall__Inputs {
    return new UpdateOrderCall__Inputs(this);
  }

  get outputs(): UpdateOrderCall__Outputs {
    return new UpdateOrderCall__Outputs(this);
  }
}

export class UpdateOrderCall__Inputs {
  _call: UpdateOrderCall;

  constructor(call: UpdateOrderCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get orderIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get taker(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get price(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get tradeMaxAdjustment(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get royaltyFactor(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get integrator(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class UpdateOrderCall__Outputs {
  _call: UpdateOrderCall;

  constructor(call: UpdateOrderCall) {
    this._call = call;
  }
}

export class WithdrawCall extends EthereumCall {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
