// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Order entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Order entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Order", id.toString(), this);
  }

  static load(id: string): Order | null {
    return store.get("Order", id) as Order | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenIds(): Array<BigInt> {
    let value = this.get("tokenIds");
    return value.toBigIntArray();
  }

  set tokenIds(value: Array<BigInt>) {
    this.set("tokenIds", Value.fromBigIntArray(value));
  }

  get maker(): string {
    let value = this.get("maker");
    return value.toString();
  }

  set maker(value: string) {
    this.set("maker", Value.fromString(value));
  }

  get taker(): string {
    let value = this.get("taker");
    return value.toString();
  }

  set taker(value: string) {
    this.set("taker", Value.fromString(value));
  }

  get buyOrSell(): string {
    let value = this.get("buyOrSell");
    return value.toString();
  }

  set buyOrSell(value: string) {
    this.set("buyOrSell", Value.fromString(value));
  }

  get anyOrAll(): string {
    let value = this.get("anyOrAll");
    return value.toString();
  }

  set anyOrAll(value: string) {
    this.set("anyOrAll", Value.fromString(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get tradeCount(): BigInt {
    let value = this.get("tradeCount");
    return value.toBigInt();
  }

  set tradeCount(value: BigInt) {
    this.set("tradeCount", Value.fromBigInt(value));
  }

  get tradeMax(): BigInt {
    let value = this.get("tradeMax");
    return value.toBigInt();
  }

  set tradeMax(value: BigInt) {
    this.set("tradeMax", Value.fromBigInt(value));
  }

  get royaltyFactor(): BigInt {
    let value = this.get("royaltyFactor");
    return value.toBigInt();
  }

  set royaltyFactor(value: BigInt) {
    this.set("royaltyFactor", Value.fromBigInt(value));
  }

  get orderIndex(): BigInt {
    let value = this.get("orderIndex");
    return value.toBigInt();
  }

  set orderIndex(value: BigInt) {
    this.set("orderIndex", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get orderIndexes(): Array<string> {
    let value = this.get("orderIndexes");
    return value.toStringArray();
  }

  set orderIndexes(value: Array<string>) {
    this.set("orderIndexes", Value.fromStringArray(value));
  }

  get orders(): Array<string> {
    let value = this.get("orders");
    return value.toStringArray();
  }

  set orders(value: Array<string>) {
    this.set("orders", Value.fromStringArray(value));
  }

  get executed(): BigInt {
    let value = this.get("executed");
    return value.toBigInt();
  }

  set executed(value: BigInt) {
    this.set("executed", Value.fromBigInt(value));
  }

  get volumeToken(): BigInt {
    let value = this.get("volumeToken");
    return value.toBigInt();
  }

  set volumeToken(value: BigInt) {
    this.set("volumeToken", Value.fromBigInt(value));
  }

  get volumeErc20(): BigInt {
    let value = this.get("volumeErc20");
    return value.toBigInt();
  }

  set volumeErc20(value: BigInt) {
    this.set("volumeErc20", Value.fromBigInt(value));
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Trade entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Trade entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Trade", id.toString(), this);
  }

  static load(id: string): Trade | null {
    return store.get("Trade", id) as Trade | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get royaltyFactor(): BigInt {
    let value = this.get("royaltyFactor");
    return value.toBigInt();
  }

  set royaltyFactor(value: BigInt) {
    this.set("royaltyFactor", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get uniqueAddresses(): Array<string> {
    let value = this.get("uniqueAddresses");
    return value.toStringArray();
  }

  set uniqueAddresses(value: Array<string>) {
    this.set("uniqueAddresses", Value.fromStringArray(value));
  }

  get orders(): Array<string> {
    let value = this.get("orders");
    return value.toStringArray();
  }

  set orders(value: Array<string>) {
    this.set("orders", Value.fromStringArray(value));
  }
}

export class GlobalStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GlobalStats entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GlobalStats entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GlobalStats", id.toString(), this);
  }

  static load(id: string): GlobalStats | null {
    return store.get("GlobalStats", id) as GlobalStats | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tipLifetimeAccumulatedInWei(): BigInt {
    let value = this.get("tipLifetimeAccumulatedInWei");
    return value.toBigInt();
  }

  set tipLifetimeAccumulatedInWei(value: BigInt) {
    this.set("tipLifetimeAccumulatedInWei", Value.fromBigInt(value));
  }

  get numberOfOrdersAdded(): BigInt {
    let value = this.get("numberOfOrdersAdded");
    return value.toBigInt();
  }

  set numberOfOrdersAdded(value: BigInt) {
    this.set("numberOfOrdersAdded", Value.fromBigInt(value));
  }

  get numberOfTradesExecuted(): BigInt {
    let value = this.get("numberOfTradesExecuted");
    return value.toBigInt();
  }

  set numberOfTradesExecuted(value: BigInt) {
    this.set("numberOfTradesExecuted", Value.fromBigInt(value));
  }
}
