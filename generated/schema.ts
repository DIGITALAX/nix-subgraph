// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Order entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get tokenIds(): Array<BigInt> | null {
    let value = this.get("tokenIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set tokenIds(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("tokenIds");
    } else {
      this.set("tokenIds", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get maker(): string | null {
    let value = this.get("maker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set maker(value: string | null) {
    if (!value) {
      this.unset("maker");
    } else {
      this.set("maker", Value.fromString(<string>value));
    }
  }

  get taker(): string | null {
    let value = this.get("taker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set taker(value: string | null) {
    if (!value) {
      this.unset("taker");
    } else {
      this.set("taker", Value.fromString(<string>value));
    }
  }

  get buyOrSell(): string | null {
    let value = this.get("buyOrSell");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyOrSell(value: string | null) {
    if (!value) {
      this.unset("buyOrSell");
    } else {
      this.set("buyOrSell", Value.fromString(<string>value));
    }
  }

  get anyOrAll(): string | null {
    let value = this.get("anyOrAll");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set anyOrAll(value: string | null) {
    if (!value) {
      this.unset("anyOrAll");
    } else {
      this.set("anyOrAll", Value.fromString(<string>value));
    }
  }

  get expiry(): BigInt | null {
    let value = this.get("expiry");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiry(value: BigInt | null) {
    if (!value) {
      this.unset("expiry");
    } else {
      this.set("expiry", Value.fromBigInt(<BigInt>value));
    }
  }

  get tradeCount(): BigInt | null {
    let value = this.get("tradeCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tradeCount(value: BigInt | null) {
    if (!value) {
      this.unset("tradeCount");
    } else {
      this.set("tradeCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get tradeMax(): BigInt | null {
    let value = this.get("tradeMax");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tradeMax(value: BigInt | null) {
    if (!value) {
      this.unset("tradeMax");
    } else {
      this.set("tradeMax", Value.fromBigInt(<BigInt>value));
    }
  }

  get royaltyFactor(): BigInt | null {
    let value = this.get("royaltyFactor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set royaltyFactor(value: BigInt | null) {
    if (!value) {
      this.unset("royaltyFactor");
    } else {
      this.set("royaltyFactor", Value.fromBigInt(<BigInt>value));
    }
  }

  get orderIndex(): BigInt | null {
    let value = this.get("orderIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set orderIndex(value: BigInt | null) {
    if (!value) {
      this.unset("orderIndex");
    } else {
      this.set("orderIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get trades(): Array<string> | null {
    let value = this.get("trades");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set trades(value: Array<string> | null) {
    if (!value) {
      this.unset("trades");
    } else {
      this.set("trades", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get lastOrderIndex(): BigInt | null {
    let value = this.get("lastOrderIndex");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastOrderIndex(value: BigInt | null) {
    if (!value) {
      this.unset("lastOrderIndex");
    } else {
      this.set("lastOrderIndex", Value.fromBigInt(<BigInt>value));
    }
  }

  get orders(): Array<string> | null {
    let value = this.get("orders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set orders(value: Array<string> | null) {
    if (!value) {
      this.unset("orders");
    } else {
      this.set("orders", Value.fromStringArray(<Array<string>>value));
    }
  }

  get executed(): BigInt | null {
    let value = this.get("executed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executed(value: BigInt | null) {
    if (!value) {
      this.unset("executed");
    } else {
      this.set("executed", Value.fromBigInt(<BigInt>value));
    }
  }

  get volumeToken(): BigInt | null {
    let value = this.get("volumeToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set volumeToken(value: BigInt | null) {
    if (!value) {
      this.unset("volumeToken");
    } else {
      this.set("volumeToken", Value.fromBigInt(<BigInt>value));
    }
  }

  get volumeErc20(): BigInt | null {
    let value = this.get("volumeErc20");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set volumeErc20(value: BigInt | null) {
    if (!value) {
      this.unset("volumeErc20");
    } else {
      this.set("volumeErc20", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Trade entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Trade", id.toString(), this);
    }
  }

  static load(id: string): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taker(): string | null {
    let value = this.get("taker");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set taker(value: string | null) {
    if (!value) {
      this.unset("taker");
    } else {
      this.set("taker", Value.fromString(<string>value));
    }
  }

  get royaltyFactor(): BigInt | null {
    let value = this.get("royaltyFactor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set royaltyFactor(value: BigInt | null) {
    if (!value) {
      this.unset("royaltyFactor");
    } else {
      this.set("royaltyFactor", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get uniqueAddresses(): Array<string> | null {
    let value = this.get("uniqueAddresses");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set uniqueAddresses(value: Array<string> | null) {
    if (!value) {
      this.unset("uniqueAddresses");
    } else {
      this.set("uniqueAddresses", Value.fromStringArray(<Array<string>>value));
    }
  }

  get orders(): Array<string> | null {
    let value = this.get("orders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set orders(value: Array<string> | null) {
    if (!value) {
      this.unset("orders");
    } else {
      this.set("orders", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class GlobalStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save GlobalStat entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("GlobalStat", id.toString(), this);
    }
  }

  static load(id: string): GlobalStat | null {
    return changetype<GlobalStat | null>(store.get("GlobalStat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tipLifetimeAccumulatedInWei(): BigInt | null {
    let value = this.get("tipLifetimeAccumulatedInWei");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tipLifetimeAccumulatedInWei(value: BigInt | null) {
    if (!value) {
      this.unset("tipLifetimeAccumulatedInWei");
    } else {
      this.set("tipLifetimeAccumulatedInWei", Value.fromBigInt(<BigInt>value));
    }
  }

  get numberOfOrdersAdded(): BigInt | null {
    let value = this.get("numberOfOrdersAdded");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numberOfOrdersAdded(value: BigInt | null) {
    if (!value) {
      this.unset("numberOfOrdersAdded");
    } else {
      this.set("numberOfOrdersAdded", Value.fromBigInt(<BigInt>value));
    }
  }

  get numberOfTradesExecuted(): BigInt | null {
    let value = this.get("numberOfTradesExecuted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numberOfTradesExecuted(value: BigInt | null) {
    if (!value) {
      this.unset("numberOfTradesExecuted");
    } else {
      this.set("numberOfTradesExecuted", Value.fromBigInt(<BigInt>value));
    }
  }
}
